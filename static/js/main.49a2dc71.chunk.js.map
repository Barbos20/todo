{"version":3,"sources":["api/todolists-api.ts","app/app-reducer.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","app/store.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/LinearProgress/LinearProgress.tsx","components/SnackBar/SnackBar.tsx","features/Login/Login.tsx","app/App.tsx","index.tsx"],"names":["TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","authAPI","data","slice","createSlice","name","initialState","status","error","isInitialized","reducers","setErrorAC","state","action","payload","setStatusAC","setAppInitializedAC","value","appReducer","reducer","actions","hendleServerAppError","dispatch","messages","length","hendleServerNetworkError","message","isLoggedIn","setIsLoggedIn","authReducer","removeTodolistAC","index","findIndex","tl","splice","addTodolistAC","unshift","todolist","filter","entityStatus","changeTodolistTitleAC","changeTodolistFilterAC","changeTodolistEntityStatusAC","setTodolistsAC","todolists","map","todolistsReducer","removeTaskAC","tasks","t","addTaskAC","task","todoListId","updateTaskAC","setTasksAC","extraReducers","builder","addCase","forEach","updateTaskTC","getState","find","apiModel","deadline","description","priority","startDate","then","res","resultCode","catch","tasksReducer","rootReducer","combineReducers","app","auth","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","useDispatchType","useDispatch","window","AddItemForm","React","memo","addItem","disabled","useState","setTitle","setError","addItemHendler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","key","className","Checkbox","Delete","Todolist","useEffect","items","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","style","paddingTop","Button","TodolistsList","useSelector","removeTaskTC","item","addTaskTC","changeStatus","newTitle","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","allTodolistTasks","Paper","to","LinearDeterminate","progress","setProgress","timer","setInterval","oldProgress","diff","Math","random","min","clearInterval","Box","sx","width","LinearProgress","Alert","ref","elevation","ErrorSnackbars","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","validate","values","errors","email","password","initialValues","rememberMe","onSubmit","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","type","FormControlLabel","control","App","logOutHendler","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","path","element","top","textAlign","CircularProgress","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.49a2dc71.chunk.js","sourcesContent":["import axios, { AxiosResponse } from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '5956fca6-d041-4a10-9654-9c72d60d7a12'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\nexport type LoginParamsType ={\r\n    email:string,\r\n    password:string,\r\n    rememberMe: boolean,\r\n    captcha?: string\r\n}\r\nexport const authAPI = {\r\n    login(data: LoginParamsType){\r\n        const promise = instance.post<ResponseType<{userId?:number}>>('auth/login',data)\r\n        return promise\r\n    },\r\n    logout(){\r\n        const promise = instance.delete<ResponseType<{userId?:number}>>('auth/login')\r\n        return promise\r\n    },\r\n    me(){\r\n        const promise = instance.get<ResponseType<{id:number, email:string, login:string}>>('auth/me')\r\n        return promise\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { setIsLoggedIn } from \"../features/Login/auth-reducer\";\nimport { authAPI } from \"./../api/todolists-api\";\nimport { Dispatch } from \"redux\";\nconst initialState: InitialStateType = {\n  status: \"loading\",\n  error: null,\n  isInitialized: false,\n};\n\ntype InitialStateType = {\n  status: RequestStatusType;\n  error: string | null;\n  isInitialized: boolean;\n};\n\nexport type RequestStatusType = \"idle\" | \"loading\" | \"succeeded\" | \"failed\";\n\nconst slice = createSlice({\n  name: \"app\",\n  initialState: initialState,\n  reducers: {\n    setErrorAC(state, action: PayloadAction<{ error: string | null }>) {\n      state.error = action.payload.error;\n    },\n    setStatusAC(state, action: PayloadAction<{ status: RequestStatusType }>) {\n      state.status = action.payload.status;\n    },\n    setAppInitializedAC(state, action: PayloadAction<{ value: boolean }>) {\n      state.isInitialized = action.payload.value;\n    },\n  },\n});\n\nexport const appReducer = slice.reducer;\n\n\nexport const InitializeAppTC = () => (dispatch: Dispatch) => {\n  dispatch(setStatusAC({ status: \"loading\" }));\n  authAPI.me().then((res) => {\n    if (res.data.resultCode === 0) {\n      dispatch(setIsLoggedIn({ value: true }));\n    } else {\n    }\n    dispatch(setAppInitializedAC({ value: true }));\n    dispatch(setStatusAC({ status: \"succeeded\" }));\n  });\n};\nexport const { setErrorAC, setStatusAC, setAppInitializedAC } = slice.actions;","import { Dispatch } from \"redux\";\nimport { ResponseType } from \"../api/todolists-api\";\nimport { setErrorAC, setStatusAC } from \"../app/app-reducer\";\n\n\n\nexport const hendleServerAppError=<D>(data:ResponseType<D>, dispatch:Dispatch)=>{\n   \n    if (data.messages.length) {\n        dispatch(setErrorAC({error: data.messages[0]}));\n      } else {\n        dispatch(setErrorAC({error: \"Some error occurred\"}));\n      }\n      dispatch(setStatusAC({status: \"failed\"}));\n}\nexport const hendleServerNetworkError =(error:{message:string},dispatch:Dispatch )=>{\n    dispatch(setErrorAC(error.message ? {error: error.message} : {error: 'Some error occurred'}));\n    dispatch(setStatusAC({status: \"failed\"}));\n}","import { Dispatch } from \"redux\";\r\nimport { setStatusAC } from \"../../app/app-reducer\";\r\nimport { hendleServerAppError } from \"../../utils/error-utils\";\r\nimport { authAPI, LoginParamsType } from \"../../api/todolists-api\";\r\nimport { hendleServerNetworkError } from \"../../utils/error-utils\";\r\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n  isLoggedIn: false,\r\n};\r\n\r\n const slice = createSlice({\r\n  name: \"auth\",\r\n  initialState: initialState,\r\n  reducers: {\r\n    setIsLoggedIn(state, action: PayloadAction<{ value: boolean }>) {\r\n      state.isLoggedIn = action.payload.value;\r\n    },\r\n  },\r\n});\r\n\r\nexport const authReducer = slice.reducer;\r\nexport const { setIsLoggedIn } = slice.actions;\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\r\n  dispatch(setStatusAC({status:\"loading\"}));\r\n  authAPI\r\n    .login(data)\r\n    .then((res) => {\r\n      if (res.data.resultCode === 0) {\r\n        dispatch(setIsLoggedIn({ value: true }));\r\n        dispatch(setStatusAC({status:\"succeeded\"}));\r\n      } else {\r\n        hendleServerAppError(res.data, dispatch);\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      hendleServerNetworkError(error, dispatch);\r\n    });\r\n};\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n  dispatch(setStatusAC({status:\"loading\"}));\r\n  authAPI\r\n    .logout()\r\n    .then((res) => {\r\n      if (res.data.resultCode === 0) {\r\n        dispatch(setIsLoggedIn({ value: false }));\r\n        dispatch(setStatusAC({status:\"succeeded\"}));\r\n      } else {\r\n        hendleServerAppError(res.data, dispatch);\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      hendleServerNetworkError(error, dispatch);\r\n    });\r\n};\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { Dispatch } from \"redux\";\r\nimport { todolistsAPI, TodolistType } from \"../../api/todolists-api\";\r\nimport { RequestStatusType, setStatusAC } from \"../../app/app-reducer\";\r\nimport { hendleServerAppError } from \"./../../utils/error-utils\";\r\n\r\nconst initialState: Array<TodolistDomainType> = [];\r\n\r\nconst slice = createSlice({\r\n  name: \"todolists\",\r\n  initialState: initialState,\r\n  reducers: {\r\n    removeTodolistAC(state, action: PayloadAction<{ id: string }>) {\r\n      const index = state.findIndex((tl) => tl.id === action.payload.id);\r\n      if (index > -1) {\r\n        state.splice(index, 1);\r\n      }\r\n    },\r\n    addTodolistAC(state, action: PayloadAction<{ todolist: TodolistType }>) {\r\n      state.unshift({\r\n        ...action.payload.todolist,\r\n        filter: \"all\",\r\n        entityStatus: \"idle\",\r\n      });\r\n    },\r\n    changeTodolistTitleAC(\r\n      state,\r\n      action: PayloadAction<{ id: string; title: string }>\r\n    ) {\r\n      const index = state.findIndex((tl) => tl.id === action.payload.id);\r\n      state[index].title = action.payload.title\r\n    },\r\n    changeTodolistFilterAC(\r\n      state,\r\n      action: PayloadAction<{ id: string; filter: FilterValuesType }>\r\n    ) {\r\n      const index = state.findIndex((tl) => tl.id === action.payload.id);\r\n      state[index].filter = action.payload.filter\r\n    },\r\n    changeTodolistEntityStatusAC(\r\n      state,\r\n      action: PayloadAction<{ id: string; status: RequestStatusType }>\r\n    ) {\r\n      const index = state.findIndex((tl) => tl.id === action.payload.id);\r\n      state[index].entityStatus = action.payload.status\r\n    },\r\n    setTodolistsAC(\r\n      state,\r\n      action: PayloadAction<{ todolists: Array<TodolistType> }>\r\n    ) { return action.payload.todolists.map((tl) => ({\r\n              ...tl,\r\n              filter: \"all\",\r\n              entityStatus: \"idle\",\r\n            }))},\r\n  },\r\n});\r\n\r\n\r\nexport const fetchTodolistsTC = () => {\r\n  return (dispatch: Dispatch) => {\r\n    dispatch(setStatusAC({ status: \"loading\" }));\r\n    todolistsAPI\r\n      .getTodolists()\r\n      .then((res) => {\r\n        dispatch(setTodolistsAC({ todolists: res.data }));\r\n        dispatch(setStatusAC({ status: \"succeeded\" }));\r\n      })\r\n      .catch((error) => {\r\n        hendleServerAppError(error, dispatch);\r\n      });\r\n  };\r\n};\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n  return (dispatch: Dispatch) => {\r\n    dispatch(setStatusAC({ status: \"loading\" }));\r\n    dispatch(\r\n      changeTodolistEntityStatusAC({ id: todolistId, status: \"loading\" })\r\n    );\r\n    todolistsAPI.deleteTodolist(todolistId).then((res) => {\r\n      dispatch(removeTodolistAC({ id: todolistId }));\r\n      dispatch(setStatusAC({ status: \"succeeded\" }));\r\n    });\r\n  };\r\n};\r\nexport const addTodolistTC = (title: string) => {\r\n  return (dispatch: Dispatch) => {\r\n    dispatch(setStatusAC({ status: \"loading\" }));\r\n    todolistsAPI.createTodolist(title).then((res) => {\r\n      dispatch(addTodolistAC({ todolist: res.data.data.item }));\r\n      dispatch(setStatusAC({ status: \"succeeded\" }));\r\n    });\r\n  };\r\n};\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n  return (dispatch: Dispatch) => {\r\n    dispatch(setStatusAC({ status: \"loading\" }));\r\n    todolistsAPI.updateTodolist(id, title).then((res) => {\r\n      dispatch(changeTodolistTitleAC({ id, title }));\r\n      dispatch(setStatusAC({ status: \"succeeded\" }));\r\n    });\r\n  };\r\n};\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\nexport type ActionsTodolistsType =\r\n  | RemoveTodolistActionType\r\n  | AddTodolistActionType\r\n  | SetTodolistsActionType\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistDomainType = TodolistType & {\r\n  filter: FilterValuesType;\r\n  entityStatus: RequestStatusType;\r\n};\r\n\r\nexport const todolistsReducer = slice.reducer;\r\nexport const {\r\n  removeTodolistAC,\r\n  addTodolistAC,\r\n  changeTodolistTitleAC,\r\n  changeTodolistFilterAC,\r\n  changeTodolistEntityStatusAC,\r\n  setTodolistsAC,\r\n} = slice.actions;\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { Dispatch } from \"redux\";\r\nimport {\r\n  TaskPriorities,\r\n  TaskStatuses,\r\n  TaskType,\r\n  todolistsAPI,\r\n  UpdateTaskModelType\r\n} from \"../../api/todolists-api\";\r\nimport { setStatusAC } from \"../../app/app-reducer\";\r\nimport { AppRootStateType } from \"../../app/store\";\r\nimport {\r\n  hendleServerAppError,\r\n  hendleServerNetworkError\r\n} from \"../../utils/error-utils\";\r\nimport {\r\n  addTodolistAC, removeTodolistAC, setTodolistsAC\r\n} from \"./todolists-reducer\";\r\n\r\nconst initialState: TasksStateType = {};\r\n\r\nconst slice = createSlice({\r\n  name: \"tasks\",\r\n  initialState: initialState,\r\n  reducers: {\r\n    removeTaskAC(\r\n      state,\r\n      action: PayloadAction<{ taskId: string; todolistId: string }>\r\n    ) {\r\n      const tasks = state[action.payload.todolistId];\r\n      const index = tasks.findIndex((t) => t.id === action.payload.taskId);\r\n      if (index > -1) {\r\n        tasks.splice(index, 1);\r\n      }\r\n    },\r\n    addTaskAC(state, action: PayloadAction<{ task: TaskType }>) {\r\n      state[action.payload.task.todoListId].unshift(action.payload.task);\r\n    },\r\n    updateTaskAC(\r\n      state,\r\n      action: PayloadAction<{\r\n        taskId: string;\r\n        model: UpdateDomainTaskModelType;\r\n        todolistId: string;\r\n      }>\r\n    ) {\r\n      const tasks = state[action.payload.todolistId];\r\n      const index = tasks.findIndex((t) => t.id === action.payload.taskId);\r\n      if (index > -1) {\r\n        tasks[index] = { ...tasks[index], ...action.payload.model };\r\n      }\r\n    },\r\n    setTasksAC(\r\n      state,\r\n      action: PayloadAction<{ tasks: Array<TaskType>; todolistId: string }>\r\n    ) {\r\n      state[action.payload.todolistId] = action.payload.tasks;\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(addTodolistAC, (state, action) => {\r\n      state[action.payload.todolist.id] = [];\r\n    });\r\n    builder.addCase(removeTodolistAC, (state, action) => {\r\n      delete state[action.payload.id];\r\n    });\r\n    builder.addCase(setTodolistsAC, (state, action) => {\r\n      action.payload.todolists.forEach((tl) => {\r\n        state[tl.id] = [];\r\n      });\r\n    });\r\n  },\r\n});\r\n\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n  dispatch(setStatusAC({ status: \"loading\" }));\r\n  todolistsAPI.getTasks(todolistId).then((res) => {\r\n    const tasks = res.data.items;\r\n    dispatch(setTasksAC({ tasks, todolistId }));\r\n    dispatch(setStatusAC({ status: \"succeeded\" }));\r\n  });\r\n};\r\nexport const removeTaskTC =\r\n  (taskId: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setStatusAC({ status: \"loading\" }));\r\n    todolistsAPI.deleteTask(todolistId, taskId).then((res) => {\r\n      dispatch(removeTaskAC({ taskId, todolistId }));\r\n      dispatch(setStatusAC({ status: \"succeeded\" }));\r\n    });\r\n  };\r\nexport const addTaskTC =\r\n  (title: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setStatusAC({ status: \"loading\" }));\r\n    todolistsAPI\r\n      .createTask(todolistId, title)\r\n      .then((res) => {\r\n        if (res.data.resultCode === 0) {\r\n          const task = res.data.data.item;\r\n          dispatch(addTaskAC({ task }));\r\n          dispatch(setStatusAC({ status: \"succeeded\" }));\r\n        } else {\r\n          hendleServerAppError(res.data, dispatch);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        hendleServerNetworkError(error, dispatch);\r\n      });\r\n  };\r\nexport const updateTaskTC =\r\n  (\r\n    taskId: string,\r\n    model: UpdateDomainTaskModelType,\r\n    todolistId: string\r\n  ) =>\r\n  (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n    dispatch(setStatusAC({ status: \"loading\" }));\r\n    const state = getState();\r\n    const task = state.tasks[todolistId].find((t) => t.id === taskId);\r\n    if (!task) {\r\n      //throw new Error(\"task not found in the state\");\r\n      // console.log(\"task not found in the state\");\r\n      return;\r\n    }\r\n\r\n    const apiModel: UpdateTaskModelType = {\r\n      deadline: task.deadline,\r\n      description: task.description,\r\n      priority: task.priority,\r\n      startDate: task.startDate,\r\n      title: task.title,\r\n      status: task.status,\r\n      ...model,\r\n    };\r\n\r\n    todolistsAPI\r\n      .updateTask(todolistId, taskId, apiModel)\r\n      .then((res) => {\r\n        if (res.data.resultCode === 0) {\r\n          dispatch(updateTaskAC({ taskId, model, todolistId }));\r\n          dispatch(setStatusAC({ status: \"succeeded\" }));\r\n        } else {\r\n          hendleServerAppError(res.data, dispatch);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        hendleServerNetworkError(error, dispatch);\r\n      });\r\n  };\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n  title?: string;\r\n  description?: string;\r\n  status?: TaskStatuses;\r\n  priority?: TaskPriorities;\r\n  startDate?: string;\r\n  deadline?: string;\r\n};\r\nexport type TasksStateType = {\r\n  [key: string]: Array<TaskType>;\r\n};\r\nexport const tasksReducer = slice.reducer;\r\nexport const { removeTaskAC, addTaskAC, updateTaskAC, setTasksAC } =\r\n  slice.actions;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport {\r\n  combineReducers\r\n} from \"redux\";\r\nimport thunkMiddleware, { ThunkDispatch } from \"redux-thunk\";\r\nimport { authReducer } from \"../features/Login/auth-reducer\";\r\nimport {\r\n  tasksReducer\r\n} from \"../features/TodolistsList/tasks-reducer\";\r\nimport {\r\n  ActionsTodolistsType,\r\n  todolistsReducer\r\n} from \"../features/TodolistsList/todolists-reducer\";\r\nimport { appReducer } from \"./app-reducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n  tasks: tasksReducer,\r\n  todolists: todolistsReducer,\r\n  app: appReducer,\r\n  auth: authReducer,\r\n});\r\n// непосредственно создаём store\r\n// export const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\nexport const store = configureStore({\r\n  reducer: rootReducer,\r\n  middleware: (getDefaultMiddleware) =>\r\n    getDefaultMiddleware().prepend(thunkMiddleware)\r\n});\r\n// определить автоматически тип всего объекта состояния\r\n\r\nexport type AppActionType = ActionsTodolistsType\r\nexport type TypedDispatch = ThunkDispatch<AppRootStateType, any, AppActionType>\r\nexport const useDispatchType = () => {\r\n    return useDispatch<TypedDispatch>()\r\n  }\r\n\r\n// удалить по завершению \r\nexport type AppRootStateType = ReturnType<typeof rootReducer>;\r\n\r\n\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from \"react\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport { AddBox } from \"@mui/icons-material\";\r\n\r\ntype AddItemFormPropsType = {\r\n  addItem: (title: string) => void;\r\n  disabled?: boolean;\r\n};\r\n\r\nexport const AddItemForm = React.memo(function ({\r\n  addItem,\r\n  disabled = false,\r\n}: AddItemFormPropsType) {\r\n  let [title, setTitle] = useState(\"\");\r\n  let [error, setError] = useState<string | null>(null);\r\n\r\n  const addItemHendler = () => {\r\n    if (title.trim() !== \"\") {\r\n      addItem(title);\r\n      setTitle(\"\");\r\n    } else {\r\n      setError(\"Title is required\");\r\n    }\r\n  };\r\n\r\n  const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setTitle(e.currentTarget.value);\r\n  };\r\n\r\n  const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    if (error !== null) {\r\n      setError(null);\r\n    }\r\n    if (e.charCode === 13) {\r\n      addItemHendler();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <TextField\r\n        variant=\"outlined\"\r\n        disabled={disabled}\r\n        error={!!error}\r\n        value={title}\r\n        onChange={onChangeHandler}\r\n        onKeyPress={onKeyPressHandler}\r\n        label=\"Title\"\r\n        helperText={error}\r\n      />\r\n      <IconButton color=\"primary\" onClick={addItemHendler} disabled={disabled}>\r\n        <AddBox />\r\n      </IconButton>\r\n    </div>\r\n  );\r\n});\r\n","import React, { ChangeEvent, useState } from \"react\";\r\nimport TextField from \"@mui/material/TextField\";\r\n\r\ntype EditableSpanPropsType = {\r\n  value: string;\r\n  onChange: (newValue: string) => void;\r\n};\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n  let [editMode, setEditMode] = useState(false);\r\n  let [title, setTitle] = useState(props.value);\r\n\r\n  const activateEditMode = () => {\r\n    setEditMode(true);\r\n    setTitle(props.value);\r\n  };\r\n  const activateViewMode = () => {\r\n    setEditMode(false);\r\n    props.onChange(title);\r\n  };\r\n  const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setTitle(e.currentTarget.value);\r\n  };\r\n\r\n  return editMode ? (\r\n    <TextField\r\n      value={title}\r\n      onChange={changeTitle}\r\n      autoFocus\r\n      onBlur={activateViewMode}\r\n    />\r\n  ) : (\r\n    <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n  );\r\n});\r\n","import React, { ChangeEvent, useCallback } from 'react'\r\nimport { EditableSpan } from '../../../../components/EditableSpan/EditableSpan'\r\nimport { TaskStatuses, TaskType } from '../../../../api/todolists-api'\r\n\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { useCallback, useEffect } from \"react\";\r\nimport { TaskStatuses, TaskType } from \"../../../api/todolists-api\";\r\nimport { AddItemForm } from \"../../../components/AddItemForm/AddItemForm\";\r\nimport { EditableSpan } from \"../../../components/EditableSpan/EditableSpan\";\r\nimport { fetchTasksTC } from \"../tasks-reducer\";\r\nimport { FilterValuesType, TodolistDomainType } from \"../todolists-reducer\";\r\nimport { Task } from \"./Task/Task\";\r\n\r\nimport { Delete } from \"@mui/icons-material\";\r\nimport Button from \"@mui/material/Button\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport { useDispatchType } from \"../../../app/store\";\r\n\r\ntype PropsType = {\r\n  todolist: TodolistDomainType\r\n  tasks: Array<TaskType>;\r\n  changeFilter: (value: FilterValuesType, todolistId: string) => void;\r\n  addTask: (title: string, todolistId: string) => void;\r\n  changeTaskStatus: (\r\n    id: string,\r\n    status: TaskStatuses,\r\n    todolistId: string\r\n  ) => void;\r\n  changeTaskTitle: (\r\n    taskId: string,\r\n    newTitle: string,\r\n    todolistId: string\r\n  ) => void;\r\n  removeTask: (taskId: string, todolistId: string) => void;\r\n  removeTodolist: (id: string) => void;\r\n  changeTodolistTitle: (id: string, newTitle: string) => void;\r\n};\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n  const dispatch = useDispatchType();\r\n  useEffect(() => {\r\n   \r\n    dispatch(fetchTasksTC(props.todolist.id));\r\n  }, []);\r\n\r\n  const addTask = useCallback(\r\n    (title: string) => {\r\n      props.addTask(title, props.todolist.id);\r\n    },\r\n    [props.addTask, props.todolist.id]\r\n  );\r\n\r\n  const removeTodolist = () => {\r\n    props.removeTodolist(props.todolist.id);\r\n  };\r\n  const changeTodolistTitle = useCallback(\r\n    (title: string) => {\r\n      props.changeTodolistTitle(props.todolist.id, title);\r\n    },\r\n    [props.todolist.id, props.changeTodolistTitle]\r\n  );\r\n\r\n  const onAllClickHandler = useCallback(\r\n    () => props.changeFilter(\"all\", props.todolist.id),\r\n    [props.todolist.id, props.changeFilter]\r\n  );\r\n  const onActiveClickHandler = useCallback(\r\n    () => props.changeFilter(\"active\", props.todolist.id),\r\n    [props.todolist.id, props.changeFilter]\r\n  );\r\n  const onCompletedClickHandler = useCallback(\r\n    () => props.changeFilter(\"completed\", props.todolist.id),\r\n    [props.todolist.id, props.changeFilter]\r\n  );\r\n\r\n  let tasksForTodolist = props.tasks;\r\n\r\n  if (props.todolist.filter === \"active\") {\r\n    tasksForTodolist = props.tasks.filter((t) => t.status === TaskStatuses.New);\r\n  }\r\n  if (props.todolist.filter === \"completed\") {\r\n    tasksForTodolist = props.tasks.filter(\r\n      (t) => t.status === TaskStatuses.Completed\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h3>\r\n        <EditableSpan value={props.todolist.title} onChange={changeTodolistTitle} />\r\n        <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n          <Delete />\r\n        </IconButton>\r\n      </h3>\r\n      <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n      <div>\r\n        {tasksForTodolist.map((t) => (\r\n          <Task\r\n            key={t.id}\r\n            task={t}\r\n            todolistId={props.todolist.id}\r\n            removeTask={props.removeTask}\r\n            changeTaskTitle={props.changeTaskTitle}\r\n            changeTaskStatus={props.changeTaskStatus}\r\n          />\r\n        ))}\r\n      </div>\r\n      <div style={{ paddingTop: \"10px\" }}>\r\n        <Button\r\n          variant={props.todolist.filter === \"all\" ? \"outlined\" : \"text\"}\r\n          onClick={onAllClickHandler}\r\n          color={\"inherit\"}\r\n        >\r\n          All\r\n        </Button>\r\n        <Button\r\n          variant={props.todolist.filter === \"active\" ? \"outlined\" : \"text\"}\r\n          onClick={onActiveClickHandler}\r\n          color={\"primary\"}\r\n        >\r\n          Active\r\n        </Button>\r\n        <Button\r\n          variant={props.todolist.filter === \"completed\" ? \"outlined\" : \"text\"}\r\n          onClick={onCompletedClickHandler}\r\n          color={\"secondary\"}\r\n        >\r\n          Completed\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n","import Grid from \"@mui/material/Grid\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport React, { useCallback, useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { TaskStatuses } from \"../../api/todolists-api\";\r\nimport { AppRootStateType, useDispatchType } from \"../../app/store\";\r\nimport { AddItemForm } from \"../../components/AddItemForm/AddItemForm\";\r\nimport {\r\n  addTaskTC,\r\n  removeTaskTC,\r\n  TasksStateType,\r\n  updateTaskTC\r\n} from \"./tasks-reducer\";\r\nimport { Todolist } from \"./Todolist/Todolist\";\r\nimport {\r\n  addTodolistTC,\r\n  changeTodolistFilterAC,\r\n  changeTodolistTitleTC,\r\n  fetchTodolistsTC,\r\n  FilterValuesType,\r\n  removeTodolistTC,\r\n  TodolistDomainType\r\n} from \"./todolists-reducer\";\r\n\r\nexport const TodolistsList: React.FC = () => {\r\n  const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(\r\n    (state) => state.todolists\r\n  );\r\n  const tasks = useSelector<AppRootStateType, TasksStateType>(\r\n    (state) => state.tasks\r\n  );\r\n  const isLoggedIn = useSelector<AppRootStateType, boolean>(\r\n    (state) => state.auth.isLoggedIn\r\n  );\r\n\r\n  const dispatch = useDispatchType();\r\n\r\n  useEffect(() => {\r\n    if(!isLoggedIn){\r\n      return\r\n    }\r\n    dispatch(fetchTodolistsTC());\r\n  }, []);\r\n\r\n  const removeTask = useCallback(function (id: string, todolistId: string) {\r\n   \r\n    dispatch(removeTaskTC(id, todolistId));\r\n  }, []);\r\n\r\n  const addTask = useCallback(function (title: string, todolistId: string) {\r\n    dispatch(addTaskTC(title, todolistId));\r\n  }, []);\r\n\r\n  const changeStatus = useCallback(function (\r\n    id: string,\r\n    status: TaskStatuses,\r\n    todolistId: string\r\n  ) {\r\n   \r\n    dispatch(updateTaskTC(id, { status }, todolistId));\r\n  },\r\n  []);\r\n\r\n  const changeTaskTitle = useCallback(function (\r\n    id: string,\r\n    newTitle: string,\r\n    todolistId: string\r\n  ) {\r\n\r\n    dispatch(updateTaskTC(id, { title: newTitle }, todolistId));\r\n  },\r\n  []);\r\n\r\n  const changeFilter = useCallback(function (\r\n    value: FilterValuesType,\r\n    todolistId: string\r\n  ) {\r\n\r\n    dispatch(changeTodolistFilterAC({id: todolistId, filter: value}));\r\n  },\r\n  []);\r\n\r\n  const removeTodolist = useCallback(function (id: string) {\r\n \r\n    dispatch(removeTodolistTC(id));\r\n  }, []);\r\n\r\n  const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n  \r\n    dispatch(changeTodolistTitleTC(id, title));\r\n  }, []);\r\n\r\n  const addTodolist = useCallback(\r\n    (title: string) => {\r\n\r\n      dispatch(addTodolistTC(title));\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  if (!isLoggedIn) {\r\n    return <Navigate to={\"/login\"} />;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Grid container style={{ padding: \"20px\" }}>\r\n        <AddItemForm addItem={addTodolist} />\r\n      </Grid>\r\n      <Grid container spacing={3}>\r\n        {todolists.map((tl) => {\r\n          let allTodolistTasks = tasks[tl.id];\r\n\r\n          return (\r\n            <Grid item key={tl.id}>\r\n              <Paper style={{ padding: \"10px\" }}>\r\n                <Todolist\r\n                  todolist={tl}\r\n                  tasks={allTodolistTasks}\r\n                  removeTask={removeTask}\r\n                  changeFilter={changeFilter}\r\n                  addTask={addTask}\r\n                  changeTaskStatus={changeStatus}\r\n                  removeTodolist={removeTodolist}\r\n                  changeTaskTitle={changeTaskTitle}\r\n                  changeTodolistTitle={changeTodolistTitle}\r\n                />\r\n              </Paper>\r\n            </Grid>\r\n          );\r\n        })}\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n","import * as React from \"react\";\nimport Box from \"@mui/material/Box\";\nimport LinearProgress from \"@mui/material/LinearProgress\";\n\nexport function LinearDeterminate() {\n  const [progress, setProgress] = React.useState(0);\n\n  React.useEffect(() => {\n    const timer = setInterval(() => {\n      setProgress((oldProgress) => {\n        if (oldProgress === 100) {\n          return 0;\n        }\n        const diff = Math.random() * 10;\n        return Math.min(oldProgress + diff, 100);\n      });\n    }, 500);\n\n    return () => {\n      clearInterval(timer);\n    };\n  }, []);\n\n  return (\n    <Box sx={{ width: \"100%\" }}>\n      <LinearProgress variant=\"determinate\" value={progress} />\n    </Box>\n  );\n}\n","import MuiAlert, { AlertProps } from \"@mui/material/Alert\";\nimport Snackbar from \"@mui/material/Snackbar\";\nimport * as React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setErrorAC } from \"../../app/app-reducer\";\n\nimport { AppRootStateType } from \"../../app/store\";\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\n  props,\n  ref\n) {\n  return <MuiAlert elevation={3} ref={ref} variant=\"filled\" {...props} />;\n});\n\nexport function ErrorSnackbars() {\n  const dispatch = useDispatch();\n  const error = useSelector<AppRootStateType, string | null>(\n    (state) => state.app.error\n  );\n\n  const handleClose = (\n    event?: React.SyntheticEvent | Event,\n    reason?: string\n  ) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    dispatch(setErrorAC({ error: null }));\n  };\n\n  const isOpen = error !== null;\n\n  return (\n    <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\n      <Alert onClose={handleClose} severity=\"error\">\n        {error}\n      </Alert>\n    </Snackbar>\n  );\n}\n","import React from \"react\";\nimport Grid from \"@mui/material/Grid\";\nimport Checkbox from \"@mui/material/Checkbox\";\nimport FormControl from \"@mui/material/FormControl\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport FormGroup from \"@mui/material/FormGroup\";\nimport FormLabel from \"@mui/material/FormLabel\";\nimport TextField from \"@mui/material/TextField\";\nimport Button from \"@mui/material/Button\";\nimport { useFormik } from \"formik\";\nimport { AppRootStateType, useDispatchType } from \"../../app/store\";\nimport { loginTC } from \"./auth-reducer\";\nimport { useSelector } from \"react-redux\";\nimport { Navigate } from \"react-router-dom\";\n\n\ntype FormikErrorType ={\n    email?: string\n   password?: string\n   rememberMe?: boolean\n}\n\nexport const Login = () => {\n  \nconst dispatch = useDispatchType()\n\nconst isLoggedIn = useSelector<AppRootStateType>(state=> state.auth.isLoggedIn)\n\n\n\n  const formik = useFormik({\n\n    validate: (values) => {\n        const errors: FormikErrorType={}\n        if (!values.email) {\n            errors.email = 'Required';\n          } \n          if (!values.password) {\n            errors.password = 'Required';\n          } \n        \n          return errors;\n      },\n    initialValues: {\n      email: \"\",\n      password: \"\",\n      rememberMe: false,\n    },\n    onSubmit: (values) => {\n        dispatch(loginTC(values))\n    },\n  });\n\n  if(isLoggedIn){\n    return <Navigate to={'/'}/>\n }\n\n  return (\n    <Grid container justifyContent={\"center\"}>\n      <Grid item justifyContent={\"center\"}>\n        <form onSubmit={formik.handleSubmit}>\n          <FormControl>\n            <FormLabel>\n              <p>\n                To log in get registered\n                <a\n                  href={\"https://social-network.samuraijs.com/\"}\n                  target={\"_blank\"}\n                >\n                  {\" \"}\n                  here\n                </a>\n              </p>\n              <p>or use common test account credentials:</p>\n              <p>Email: artur.korol.2000.10.25@mail.ru</p>\n              <p>Password: 123456789</p>\n            </FormLabel>\n            <FormGroup>\n              <TextField\n                label=\"Email\"\n                margin=\"normal\"\n                {...formik.getFieldProps(\"email\")}\n              />\n              {formik.errors.email ? <div>{formik.errors.email}</div> : null}\n              <TextField\n                type=\"password\"\n                label=\"Password\"\n                margin=\"normal\"\n                {...formik.getFieldProps(\"password\")}\n              />\n              {formik.errors.password ? (<div>{formik.errors.password}</div>) : null}\n              <FormControlLabel\n                label={\"Remember me\"}\n                control={\n                  <Checkbox\n                    {...formik.getFieldProps(\"rememberMe\")}\n                    checked={formik.values.rememberMe}\n                  />\n                }\n              />\n              <Button type={\"submit\"} variant={\"contained\"} color={\"primary\"}>\n                Login\n              </Button>\n            </FormGroup>\n          </FormControl>\n        </form>\n      </Grid>\n    </Grid>\n  );\n};\n","import React, { useCallback, useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport { TodolistsList } from \"../features/TodolistsList/TodolistsList\";\r\n\r\n// You can learn about the difference by reading this guide on minimizing bundle size.\r\n// https://mui.com/guides/minimizing-bundle-size/\r\n// import { AppBar, Button, Container, IconButton, Toolbar, Typography } from '@mui/material';\r\nimport AppBar from \"@mui/material/AppBar\";\r\nimport Toolbar from \"@mui/material/Toolbar\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Container from \"@mui/material/Container\";\r\nimport { Menu } from \"@mui/icons-material\";\r\nimport { LinearDeterminate } from \"../components/LinearProgress/LinearProgress\";\r\nimport { ErrorSnackbars } from \"../components/SnackBar/SnackBar\";\r\nimport { AppRootStateType, useDispatchType } from \"./store\";\r\nimport { InitializeAppTC, RequestStatusType } from \"./app-reducer\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { BrowserRouter, Route, Routes } from \"react-router-dom\";\r\nimport { Login } from \"../features/Login/Login\";\r\nimport { CircularProgress } from \"@mui/material\";\r\nimport { logoutTC } from \"../features/Login/auth-reducer\";\r\n\r\n\r\nfunction App() {\r\n  const status = useSelector<AppRootStateType, RequestStatusType>(\r\n    (state) => state.app.status\r\n  );\r\n  const isInitialized = useSelector<AppRootStateType, boolean>(\r\n    (state) => state.app.isInitialized\r\n  );\r\n  const isLoggedIn = useSelector<AppRootStateType>(state=> state.auth.isLoggedIn)\r\n\r\nconst dispatch = useDispatchType()\r\n\r\nconst logOutHendler = useCallback(()=>{\r\n  dispatch(logoutTC())\r\n},[])\r\n\r\nuseEffect(()=>{\r\n  dispatch(InitializeAppTC())\r\n},[])\r\n\r\n  if (!isInitialized) {\r\n    return (\r\n      <div\r\n        style={{\r\n          position: \"fixed\",\r\n          top: \"30%\",\r\n          width: \"100%\",\r\n          textAlign: \"center\",\r\n        }}\r\n      >\r\n        <CircularProgress />\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <BrowserRouter>\r\n      <div className=\"App\">\r\n        <ErrorSnackbars />\r\n        <AppBar position=\"static\">\r\n          <Toolbar>\r\n            <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n              <Menu />\r\n            </IconButton>\r\n            <Typography variant=\"h6\">News</Typography>\r\n            {isLoggedIn && <Button color=\"inherit\" onClick={logOutHendler}>Log out</Button>}\r\n          </Toolbar>\r\n          {status === \"loading\" && <LinearDeterminate />}\r\n        </AppBar>\r\n        <Container fixed>\r\n          <Routes>\r\n            <Route path={\"/\"} element={<TodolistsList />} />\r\n            <Route path={\"/login\"} element={<Login />} />\r\n          </Routes>\r\n          {/* <TodolistsList/> */}\r\n        </Container>\r\n      </div>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport { Provider } from 'react-redux';\nimport { store } from './app/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}